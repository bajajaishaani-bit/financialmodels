print("""Integrated Financial Model""")

# 1. ASSUMPTIONS DASHBOARD - CHANGE THESE VALUES TO TEST SCENARIOS
print(" ASSUMPTIONS DASHBOARD ")
# Initial Setup
initial_cash = 200000  # C_0
# Consulting Drivers
consultants_y1 = 3     # C_y1
consultant_growth = 0.20  # C_g
billable_hours = 1000  # H
billable_rate = 140    # R
# SaaS Drivers
saas_customers_y1 = 5  # S_y1
saas_growth = 0.50     # S_g
avg_annual_value = 6000  # ACV
# Margin & Efficiency
initial_gross_margin = 0.65  # GM_i
efficiency_gain = 0.03       # E_g
# Funding & Goals
age_funding_percent = 0.40   # AGE%
tax_rate = 0.25             # T
# Milestone Targets
target_npm_y1 = -0.20  # NPM_t1 (Planned loss of 20%)
target_npm_y2 = 0.00   # NPM_t2 (Break-even)
target_npm_y3 = 0.20   # NPM_t3 (20% profit)
# Non-Profit Assumptions
projects_developed_y1 = 3 #please alter according to the projects we take on
credit_price_y1 = 1200 #current India price per tonne for premium credits
credits_per_project = 5
project_growth = 0.05 #assuming 5% growth
credit_price_growth = 0.05 #assuming 5% growth
age_fee_percentage = 0.10 #assuming 10% of the revenue is kept by age to cover the costs
external_grants_y1 = 50000
external_grants_y2 = 55000
external_grants_y3 = 60000
program_expense_percent = 0.70
admin_expense_percent = 0.15

print("Assumptions loaded successfully!\n")

# 2. FINANCIAL MODEL CALCULATIONS
print(" FINANCIAL MODEL RESULTS ")
print("Year 1: Strategic Investment (Planned Loss)")
print("Year 2: Break-Even")
print("Year 3: Target Profitability\n")

# Initialize results storage
years = [1, 2, 3]
results = {}

for year in years:
    n = year
    print(f"--- YEAR {n} RESULTS ---")

    # Calculate year index for growth rates
    year_index = n - 1

    # REVENUE CALCULATIONS (Equations 1-3) (consultants will bring in revenue)
    consultants = consultants_y1 * (1 + consultant_growth) ** year_index #compounding, hence n-1
    consulting_revenue = consultants * billable_hours * billable_rate

    #revenue from our software platform
    saas_customers = saas_customers_y1 * (1 + saas_growth) ** year_index
    saas_revenue = saas_customers * avg_annual_value

    total_revenue = consulting_revenue + saas_revenue
    print(f"Consultants: {consultants:.1f}")
    print(f"Consulting Revenue: ${consulting_revenue:,.2f}")
    print(f"SaaS Customers: {saas_customers:.1f}")
    print(f"SaaS Revenue: ${saas_revenue:,.2f}")
    print(f"TOTAL REVENUE: ${total_revenue:,.2f}")

    # GROSS PROFIT CALCULATIONS (Equations 4-6)
    gross_margin_pct = initial_gross_margin * (1 + efficiency_gain) ** year_index
    gross_profit = total_revenue * gross_margin_pct
    total_cor = total_revenue * (1 - gross_margin_pct)

    print(f"\nGross Margin %: {gross_margin_pct:.1%}")
    print(f"Gross Profit: ${gross_profit:,.2f}")
    print(f"Total Cost of Revenue: ${total_cor:,.2f}")

    # OPEX CALCULATION (Equation 7 - The Engine)
    if n == 1:
        target_npm = target_npm_y1
    elif n == 2:
        target_npm = target_npm_y2
    else:
        target_npm = target_npm_y3

    # This is the CORE equation: OPEX% = Gross_Margin% - [Target_NPM / ((1-AGE%)*(1-Tax%))]
    opex_percent = gross_margin_pct - (target_npm / ((1 - age_funding_percent) * (1 - tax_rate)))
    total_opex = total_revenue * opex_percent

    print(f"\nOPEX %: {opex_percent:.1%}")
    print(f"Total OPEX: ${total_opex:,.2f}")

    # NET PROFIT CALCULATIONS (Equations 9-13)
    # --- CARBON CREDIT CALCULATIONS ---
    projects_developed = projects_developed_y1 * (1 + project_growth) ** (n-1)
    total_credits_generated = projects_developed * credits_per_project
    current_credit_price = credit_price_y1 * (1 + credit_price_growth) ** (n-1)
    gross_credit_sales_value = total_credits_generated * current_credit_price
    carbon_fee_revenue = gross_credit_sales_value * age_fee_percentage #age keeps a percent of the revenue for itself to cover costs, the rest of it from gross credit sales goes back to the communities whose project helped get the carbon credit

    # --- NON-PROFIT P&L ---
    if n == 1:
        grants = external_grants_y1
    elif n == 2:
        grants = external_grants_y2
    else:
        grants = external_grants_y3


    profit_before_tax = gross_profit - total_opex
    age_funding = profit_before_tax * age_funding_percent if profit_before_tax > 0 else 0

    total_revenue_nonprofit = age_funding + grants + carbon_fee_revenue
    program_expense_ratio = program_expense_percent # Using the defined percentage
    admin_expense_ratio = admin_expense_percent   # Using the defined percentage

    program_expenses = total_revenue_nonprofit * program_expense_ratio
    admin_expenses = total_revenue_nonprofit * admin_expense_ratio
    total_expenses_nonprofit = program_expenses + admin_expenses
    surplus = total_revenue_nonprofit - total_expenses_nonprofit

    # --- Print the new results ---
    print(f"\nNON-PROFIT RESULTS:")
    print(f"Funding from Enterprise: ${age_funding:,.2f}")
    print(f"External Grants: ${grants:,.2f}")
    print(f"Carbon Credit Fees: ${carbon_fee_revenue:,.2f}") # NEW LINE
    print(f"Total Non-Profit Revenue: ${total_revenue_nonprofit:,.2f}")
    print(f"Program Expenses: ${program_expenses:,.2f} ({program_expense_ratio:.0%} of revenue)")
    print(f"Admin Expenses: ${admin_expenses:,.2f} ({admin_expense_ratio:.0%} of revenue)")
    print(f"Surplus/(Deficit): ${surplus:,.2f}")

    # Calculate tax expense
    tax_expense = profit_before_tax * tax_rate if profit_before_tax > 0 else 0

    # Assuming net_profit_after_age is calculated elsewhere
    # It seems like net_profit_after_age should be the profit of the for-profit arm after the transfer to the non-profit
    net_profit_after_age = profit_before_tax - age_funding - tax_expense # This is a plausible calculation based on the names

    # CASH FLOW CALCULATIONS (Equations 20-21)
    if n == 1:
        starting_cash = initial_cash #If it is Year 1, the cash you start with is the initial investment
    else:
        starting_cash = results[n-1]['ending_cash'] # For these years, the cash you start with is whatever cash you had left over at the end of the previous year.
        #calls dictionary of results

    # Calculate TOTAL CASH OUTFLOWS
    total_cash_outflows = total_cor + total_opex + tax_expense + age_funding

    # Ending Cash Calculation
    ending_cash = starting_cash + total_revenue - total_cash_outflows
    print(f"\nCASH POSITION:")
    print(f"Starting Cash: ${starting_cash:,.2f}")
    print(f"Ending Cash: ${ending_cash:,.2f}")

    # Store results for future reference
    results[n] = {
        'total_revenue': total_revenue,
        'net_profit_after_age': net_profit_after_age,
        'ending_cash': ending_cash,
        'age_funding': age_funding
    }

print("\n" + "="*50)

# 3. SUMMARY OF 3-YEAR JOURNEY
print("\n=== 3-YEAR SUMMARY ===")
print(f"{'':<10} {'Year 1':<12} {'Year 2':<12} {'Year 3':<12}")
print(f"{'Revenue':<10} ${results[1]['total_revenue']:>10,.0f} ${results[2]['total_revenue']:>10,.0f} ${results[3]['total_revenue']:>10,.0f}")
print(f"{'Net Profit':<10} ${results[1]['net_profit_after_age']:>10,.0f} ${results[2]['net_profit_after_age']:>10,.0f} ${results[3]['net_profit_after_age']:>10,.0f}")
print(f"{'AGE Funding':<10} ${results[1]['age_funding']:>10,.0f} ${results[2]['age_funding']:>10,.0f} ${results[3]['age_funding']:>10,.0f}")
print(f"{'Ending Cash':<10} ${results[1]['ending_cash']:>10,.0f} ${results[2]['ending_cash']:>10,.0f} ${results[3]['ending_cash']:>10,.0f}")

print("\n=== MODEL READY ===")
print("Change assumptions at the top to test different scenarios!")
